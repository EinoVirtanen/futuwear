import serial
#import bpy
import math
import bge
from math import *
import mathutils

#potikan aariarvot: 0-1023

"""
#Rotaatio ei toimi nain reaaliajassa.
#Arduinon antaman arvon luku ja printtaus kuitenkin toimii.


knob = bpy.data.objects["Cube"]
knob.rotation_mode = 'XYZ'

ser=serial.Serial('COM3',9600)

while(1==1):
    line=ser.readline()
    try:
        line=int(line)
    except ValueError:
        pass
    
    line=float(line)
    angle = (2*3.14)/1024*line
    knob.rotation_euler = ( 0, 0, angle)
    print("{:.2f}".format(angle))
    
"""


a=0.0
aMin = 9999
aMax = 0
ser=serial.Serial('COM3',9600)

def AnaLoop():
     while(ser.inWaiting()!=0):
         global a, aMin, aMax
         line=ser.readline()
         try:
            a=float(line)
         except ValueError:
            k = 42
         #a = (2*3.14)/1024*a
         if a > aMax:
             aMax = a
         if a < aMin:
             aMin = a
         print("a:{:.2f} aMin:{:.2f} aMax:{:.2f}".format(a,aMin,aMax))
      
"""
#Alla maaritellyn Cuben testausta varten.        
def AnaLoop():                
     a=a+1    
     global a                    
     print (a)    
"""    
        
def Cube():
    global a
    scene = bge.logic.getCurrentScene()     #Locate current device
    cont = bge.logic.getCurrentController()
    own = cont.owner   
 
    xyz = own.localOrientation.to_euler()   #Extract the Rotation Data    
    xyz[0] = math.radians(a)                #PreLoad your RX data
                                            #xyz[0] x Rotation axis
                                            #xyz[1] y Rotation axis
                                            #xyz[2] z Rotation axis
    own.localOrientation = xyz.to_matrix()  #Apply your rotation data
    
    
    
    
    
def Luusto():
    #a:n arvot flex-sensorin testauksella n.400-800
    global a, aMin, aMax
    scene = bge.logic.getCurrentScene()     #Locate current device
    source = scene.objects
    arm = source.get('Luusto')
    
    ob = bge.logic.getCurrentController().owner
    
    b = -((a-aMin)/(aMax - aMin))
    ob.channels['Bone.001'].joint_rotation = mathutils.Vector([0,0,b])
    ob.update()
    